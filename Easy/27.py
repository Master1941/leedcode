"""
Учитывая целочисленный массив nums и целое число val, удалите все вхождения val в nums на месте. Порядок элементов может быть изменен. Затем верните количество элементов в nums , которые не равны val.

Учитывайте количество элементов в nums , которые не равны val be k чтобы быть принятым, вам нужно выполнить следующие действия:

Измените массив nums таким образом, чтобы первые k элементы из nums содержали элементы, которые не равны val. Остальные элементы из nums не важны, так же как и размер nums.
Возврат k.
Индивидуальный судья:

Судья протестирует ваше решение с помощью следующего кода:

int[] nums = [...]; // Входной массив 
int val = ...; // Значение для удаления 
int[] expectedNums = [...]; // Ожидаемый ответ правильной длины.
 // Он отсортирован без значений, равных val .

int k = removeElement(nums, val); // Вызывает вашу реализацию

утверждаем k == Ожидаемые числа.длина; 
сортируем (nums, 0, k); // Сортируем первые k элементов nums 
for (int i = 0; i < Фактическая длина; i++) {
 утверждать числа [i] == Ожидаемые числа [i]; 
}
Если все утверждения подтвердятся, то ваше решение будет принято.

Пример 1:

Ввод: nums = [3,2,2,3], val = 3
Вывод: 2, nums = [2,2,_,_]
Объяснение: Ваша функция должна возвращать k = 2, при этом первые два элемента nums равны 2.
Не имеет значения, что вы оставляете за пределами возвращаемого k (следовательно, они являются символами подчеркивания).
Пример 2:

Ввод: nums = [0,1,2,2,3,0,4,2], значение = 2
Вывод: 5, nums = [0,1,4,0,3,_,_,_]
Объяснение: Ваша функция должна возвращать k = 5, причем первые пять элементов nums содержат 0, 0, 1, 3 и 4.
Обратите внимание, что пять элементов могут быть возвращены в любом порядке.
Не имеет значения, что вы оставляете за пределами возвращаемого k (следовательно, это символы подчеркивания).
 
Ограничения:

0 <= nums.length <= 100
0 <= nums[i] <= 50
0 <= val <= 100
"""
from typing import List


class Solution:
    def removeElement(self, nums: List[int], val: int) -> int:
        k = 0
        for i in range(len(nums)):
            if nums[i] != val:
                nums[k] = nums[i]
                k += 1
        return k


if __name__ == "__main__":
    sol = Solution()

    nums = [3, 2, 2, 3]
    val = 3
    print(sol.removeElement(nums=nums, val=val), nums)

    nums = [0, 1, 2, 2, 3, 0, 4, 2]
    val = 2
    print(sol.removeElement(nums=nums, val=val), nums)
