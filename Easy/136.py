"""
Учитывая непустой массив целых чисел nums, каждый элемент появляется дважды,
кроме одного. Найдите этот единственный элемент.

Вы должны реализовать решение с линейной сложностью во время выполнения
и использовать только постоянное дополнительное пространство
"""

from typing import Optional, List


class Solution:
    def singleNumber(self, nums: List[int]) -> int:
        """побитовых манипуляций требует сложности только O (1), учитывая,
        что ему нужно вычислять только между двумя элементами одновременно и
        требует минимального пространства, поскольку оно сохраняет результат
        каждой операции XOR в первом элементе массива."""
        res = 0
        for i in nums:
            res ^= i
        return res
    
    def singleNumber_2(self, nums: List[int]) -> int:
        """поддерживают O (n) сложность и O (n) пространство,
        поскольку они должны вычислять по всему массиву и сохранять его."""
        return 2*sum(set(nums)) - sum(nums)


if __name__ == "__main__":
    sol = Solution()
    # Пример 1:
    nums = [2, 2, 1]  #    Вывод: 1
    print(sol.singleNumber(nums))
    # Пример 2:
    nums = [4, 1, 2, 1, 2]  #    Вывод: 4
    print(sol.singleNumber(nums))

    # Пример 3:
    nums = [1]  #    Вывод: 1
    print(sol.singleNumber(nums))
